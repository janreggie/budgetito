{"version":3,"sources":["Form.tsx","Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Form","addEntry","useState","type","setType","name","setName","value","setValue","onRadioButtonChange","e","target","onSubmit","preventDefault","id","checked","onChange","input","isNaN","Number","parseFloat","splitViaDecimalPoint","split","length","handleCurrency","Table","entries","totalIncome","reduce","prev","cur","totalExpense","netAmount","map","entry","ind","toFixed","style","fontWeight","color","Math","abs","App","useReducer","state","action","dispatch","console","log","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c54fa00.chunk.js","sourcesContent":["import React, { ChangeEvent, FormEvent, useState } from 'react'\nimport { Entry, EntryType } from './types'\n\nfunction Form ({ addEntry } : { addEntry : ((e : Entry) => void)}) {\n  const [type, setType] = useState<EntryType>('Income')\n  const [name, setName] = useState('')\n  const [value, setValue] = useState(0)\n\n  // handleCurrency handles input and tries to set value to its appropriate amount.\n  const handleCurrency = (input : string) : void => {\n    if (input === '') {\n      setValue(0)\n      return\n    }\n\n    // Check if string is even a valid number.\n    // See https://stackoverflow.com/a/175787/14020202.\n    if (isNaN(Number(input)) || isNaN(parseFloat(input))) {\n      return\n    }\n\n    // Otherwise do things here...\n    const splitViaDecimalPoint = input.split('.')\n    switch (splitViaDecimalPoint.length) {\n      case 1:\n        setValue(parseFloat(input))\n        return\n      case 2:\n        if (splitViaDecimalPoint[1].length <= 2) {\n          setValue(parseFloat(input))\n        }\n    }\n  }\n\n  // onRadioButtonChange is onHandleChange for the radio button and type\n  const onRadioButtonChange = (e : ChangeEvent<HTMLInputElement>) : void => {\n    setType(e.target.value as EntryType)\n  }\n\n  // handleSubmit handles submission of the form using addEntry\n  const handleSubmit = (e : FormEvent<HTMLFormElement>) : void => {\n    e.preventDefault()\n    addEntry({ type: type, name: name, value: value })\n    setType('Income')\n    setName('')\n    setValue(0)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div id='type-select'>\n        Item type:\n        <label>\n          <input type='radio' value='Income' checked={type === 'Income'} onChange={onRadioButtonChange} /> Income\n        </label>\n        <label>\n          <input type='radio' value='Expense' checked={type === 'Expense'} onChange={onRadioButtonChange} /> Expense\n        </label>\n      </div>\n      <div id='name-select'>\n        <label>\n          Item name:\n          <input type=\"text\" value={name} onChange={e => setName(e.target.value)} />\n        </label>\n      </div>\n      <div id='value-select'>\n        <label>\n          Item value:\n          <input type='number' value={value} onChange={e => handleCurrency(e.target.value)} />\n        </label>\n      </div>\n      <input type='submit' value='Add' />\n    </form>\n  )\n}\n\nexport default Form\n","import React from 'react'\nimport { Entry } from './types'\n\nfunction Table ({ entries } : { entries : Entry[] }) {\n  const totalIncome = entries.reduce((prev, cur) => cur.type === 'Income' ? prev + cur.value : prev, 0)\n  const totalExpense = entries.reduce((prev, cur) => cur.type === 'Expense' ? prev + cur.value : prev, 0)\n  const netAmount = totalIncome - totalExpense\n\n  return (\n    <table id='table'>\n      <thead>\n        <tr>\n          <th>Items</th>\n          <th>Income</th>\n          <th>Expenses</th>\n          <th></th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {entries.map((entry, ind) => (\n          <tr key={ind}>\n            <td>{entry.name}</td>\n            <td>{entry.type === 'Income' ? '$' + entry.value.toFixed(2) : ''}</td>\n            <td>{entry.type === 'Expense' ? '$' + entry.value.toFixed(2) : ''}</td>\n            <td></td>\n          </tr>\n        ))}\n        <tr>\n          <td style={{ fontWeight: 'bold' }}>Total</td>\n          <td>{'$' + totalIncome.toFixed(2)}</td>\n          <td>{'$' + totalExpense.toFixed(2)}</td>\n          <td style={{\n            fontWeight: 'bold',\n            color: (netAmount < 0) ? 'red' : 'inherit'\n          }}>{'$' + Math.abs(netAmount).toFixed(2)}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table\n","import React, { useReducer } from 'react'\nimport Form from './Form'\nimport Table from './Table'\nimport { Action, State } from './types'\nimport './App.css'\n\nfunction App () {\n  const reducer = (state : State, action : Action) : State => {\n    switch (action.type) {\n      case 'clear':\n        return { entries: [] }\n      case 'add':\n        return { entries: [...state.entries, action.entry] }\n    }\n  }\n  const [state, dispatch] = useReducer(reducer, { entries: [] })\n  console.log(state)\n\n  return (\n    <div className=\"App\">\n      <h1>My Budget</h1>\n      <Form addEntry={(entry) => dispatch({ type: 'add', entry: entry })} />\n      <Table entries={state.entries} />\n      <input type='button' onClick={() => dispatch({ type: 'clear' })} value='Clear' />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}